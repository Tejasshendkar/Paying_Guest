package com.example.payingguest.controller;

import java.io.IOException;
import java.util.List;
import java.util.Base64;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.payingguest.exception.ImageNotFoundException;
import com.example.payingguest.service.ImagesService;

@RestController
@CrossOrigin("*")
@RequestMapping("/pg_api/image")
public class ImageController {

	@Autowired
	private ImagesService imagesServiceRef;

	@PostMapping("/upload/{roomId}")
	public ResponseEntity<?> uploadImage(@RequestParam("image") MultipartFile image, @PathVariable Long roomId)
			throws IOException {
		return imagesServiceRef.saveImage(image, roomId);
	}

	@GetMapping("/get/{id}")
    public ResponseEntity<?> getImage(@PathVariable Long id) {
        try {
            byte[] imageData = imagesServiceRef.getImageDataById(id);
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.IMAGE_JPEG); // Set the content type to the appropriate image type
            return new ResponseEntity<>(imageData, headers, HttpStatus.OK);
        } catch (ImageNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }
	
	 @GetMapping("/getByRoom/{roomId}")
	    public ResponseEntity<?> getImagesByRoom(@PathVariable Long roomId) {
	        try {
	            List<byte[]> imagesData = imagesServiceRef.getImagesDataByRoomId(roomId);
	            if (imagesData.isEmpty()) {
	                return new ResponseEntity<>("No images found for room ID: " + roomId, HttpStatus.NOT_FOUND);
	            }
	            List<String> base64Images = imagesData.stream()
	                    .map(imageData -> "data:image/jpeg;base64," + Base64.getEncoder().encodeToString(imageData))
	                    .collect(Collectors.toList());
	            return new ResponseEntity<>(base64Images, HttpStatus.OK);
	        } catch (ImageNotFoundException e) {
	            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
	        }
	    }

	@DeleteMapping("/delete/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id) {
		try {
			return imagesServiceRef.delete(id);
		} catch (ImageNotFoundException e) {
			return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
	}
}
